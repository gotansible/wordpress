#jinja2: trim_blocks: True, lstrip_blocks: True

# Caching Proxy For Wordpress
server {
	server_name ~^{{ wordpress_root_domain | replace(".", "\.") }}$ ~^www\.{{ wordpress_root_domain | replace(".", "\.") }}$ ~^{{ wordpress_root_domain | replace(".", "\.") }}\.{{ wordpress_test_domain | replace(".", "\.") }}$;
	listen 80 {% if wordpress_default_site %}default_server{% endif %};

	access_log /var/log/nginx/{{ wordpress_root_domain }}_proxy_access.json json;
	error_log  /var/log/nginx/{{ wordpress_root_domain }}_proxy_error.log error;
	access_log /var/log/nginx/{{ wordpress_root_domain }}_proxy_cache.json cache;

	include global/pagespeed-cache-html-server.conf; #bypass cache comes from here
	include global/wordpress-cache-conditions.conf;  #skip cache conditions comes from here

	include global/cross-domain-fonts.conf;

	### beacon random sample ###

	set $should_beacon_header_val "";
	set_random $rand 0 100;
	if ($rand ~* "^[0-4]$") {
	  set $should_beacon_header_val {{ wordpress_pagespeed_beacon_key }};
	  set $bypass_cache 1;
	}

	# Cross domain webfont access
#	location ~* \.(ttf|ttc|otf|eot|woff|woff2)$ {
#		#    if ($http_origin ~* (https?://.*\.{{ wordpress_root_domain | replace(".", "\.") }}(:[0-9]+)?$)) {
#		set $cors "1";
#		
#		# OPTIONS indicates a CORS pre-flight request
#		if ($request_method = 'OPTIONS') {
#			set $cors "${cors}o";
#		}
#			
#		# OPTIONS (pre-flight) request from allowed 
#		# CORS domain. return response directly
#		if ($cors = "1o") {
#			more_set_headers 'Access-Control-Allow-Origin: $http_origin';
#			more_set_headers 'Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE';
#			more_set_headers 'Access-Control-Allow-Credentials: true';
#			more_set_headers 'Access-Control-Allow-Headers: Origin,Content-Type,Accept';
#			add_header Content-Length 0;
#			add_header Content-Type text/plain;
#			return 204;
#		}
#
#		more_set_headers 'Access-Control-Allow-Origin: $http_origin';
#		more_set_headers 'Access-Control-Allow-Credentials: true';
#		access_log off;
#		expires 31d;
#		more_set_headers 'Cache-Control: public';
#		proxy_pass http://localhost:8090;
#		include global/pagespeed-proxy-cache.conf; # do actual caching
#			
#	}

#	location / {
#		try_Files /var/thisfileshouldnotexists @proxyit;
#	}

	location / {
		proxy_pass http://localhost:8090/;
		include global/pagespeed-proxy-cache.conf; # do actual caching

		proxy_cache_valid  200 18h;
		proxy_cache_min_uses  1;

		## pagespeed beacon ##
		set_if_empty $ua_dependent_ps_capability_list "fully general optimizations only";

		proxy_set_header PS-CapabilityList $ua_dependent_ps_capability_list ;
		proxy_hide_header PS-ShouldBeacon;
		proxy_set_header PS-ShouldBeacon $should_beacon_header_val;
	}
}

